
#ifndef DIVISOR_LOADED_
#define DIVISOR_LOADED_

#include "list.h"


typedef struct divisor 
{
    smallint genus;
    medint lambda; 
    line *pDelta;

    int maxdelta;     /* ALSO KNOWN AS FLOOR OF GENUS / 2 */

} divisor, divisor_t;

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// DIVISOR PUBLIC INTERFACE
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

extern divisor *div_new(smallint genus);

/////////////////////////////////////////////////////////////////
// smallint div_genus(divisor *pDiv); uses macro below
/////////////////////////////////////////////////////////////////
#define div_genus(div) ((div)->genus)


////////////////////////////////////////////////////////////////
// returns the floor of genus / 2 = largest coefficient of delta
// with restpect to function div_delta
////////////////////////////////////////////////////////////////
#define div_maxdelta(div) (((div)->genus) / 2)


//////////////////////////////////////////////////////////////////
// returns coefficient b_i (delta(i))
//////////////////////////////////////////////////////////////////
#define div_delta(pDiv, i) \
  (line_data((pDiv)->pDelta, ((i < ((pDiv)->genus - i)) ? (i) : \
                               ((pDiv)->genus - i))))


////////////////////////////////////////////////////////////////
// creates a new divisor which must be killed by div_kill
// div_read reads a divisor from a string in the format
// lambda b_0 b_1 ... b_m etc. where m = genus / 2
////////////////////////////////////////////////////////////////
extern divisor *div_read(char s[], smallint genus);

// as above, but reads from a variable argument list. the first entry s[0]
// is assumed to hold the lambda coordinate.

extern divisor *div_vread(char *s[], smallint genus);


//////////////////////////////////////////////////////////////////
// displays a divisor in the form
// lambda   b_0    b_1    ... b_m
// with no newlines.
//////////////////////////////////////////////////////////////////
extern void div_display(divisor *pDiv);


//////////////////////////////////////////////////////////////////
// displays as above to the given file (assumed to be open for
// writing).
//////////////////////////////////////////////////////////////////
extern void div_display_file(FILE *outfile, divisor *pDiv);

////////////////////////////////////////////////////////////////
// reads a divisor in lrs format from stdin
////////////////////////////////////////////////////////////////
extern void div_lrs_input(divisor *pDiv);


////////////////////////////////////////////////////////////////
// clears delta line in divisor. can read new data without
// memory reallocation.
////////////////////////////////////////////////////////////////
#define div_clear(pDiv) (line_clear((pDiv)->pDelta))


//////////////////////////////////////////////////////////////////////
// here the list is assumed to be a list of integer types. returns
// sum of b_i for i in given list
//////////////////////////////////////////////////////////////////////
extern medint div_sum_delta_in_list(divisor *pDiv, list *pList);


//////////////////////////////////////////////////////////////////////
// checks if pDiv is an F-divisor
//////////////////////////////////////////////////////////////////////
bool div_is_f(divisor *pDiv);

#endif
